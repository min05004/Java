# 튜플은 리스트와 동일한 특징을 가지고 있다.
# 인덱싱, 멤버쉽 연산, 크기 함수, 슬라이싱, 반복성, + 연산자, * 연산자
# 여기서는 아래에는 인덱싱, 반복성, + 연산자, * 연산자만 사용한다.

# 변수 t에 튜플 형식으로 정수 1 ~ 5까지 저장한다.
t=(1,2,3,4,50)
for value in t :
    print(value)
print()

print(t[2],t[-3])
print(7 not in t)
print(len(t))

# + 연산자 (튜플 결합)
# + 연산자를 이용해서 튜플끼로 더할 수 있다.
# 형식 : 
# 튜플1 + 튜플2
# (1,2,3,4,5) + (10,20,30,40,50)
# (1, 2, 3, 4, 5, 10, 20, 30, 40, 50)
# 임시적으로 + 한 것이고
# 영구적으로 + 하려면 변수에 저장해야 한다.
t = (1,2,3,4,5)
print(t + (10, 20, 30, 40, 50))  # 임시적으로 + 한 것
print(t)  # (1, 2, 3, 4, 5)
t += (10, 20, 30, 40, 50)  # 영구적으로 + 한 것, t = t + (10, 20, 30, 40, 50)
print(t)  # (1, 2, 3, 4, 5, 10, 20, 30, 40, 50)

# * 연산자 (튜플 반복)
# * 연산자를 이용해서 튜플을 반복한다.
# 형식 : 튜플변수명 * 정수값
# (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)
# 임시적으로 * 한 것이고
# 영구적으로 * 할려면 변수에 저장해야 한다.
t = (1,2,3,4,5)
print(t * 3)  # 임시적 (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)
print(t)  # (1, 2, 3, 4, 5)
t *= 3    # 영구적 t = t * 3
print(t)  # (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)

# 튜퓰은 +, * 연산은 가능하지만 -, / 연산은 불가능하다. 
# print(t - (1,2,3))
# print(t / (1,2,3))

# 인덱스 값 변경 X
# 단 편법으로 값을 새롭게 만들어서 t 변수에 저장할  있다.
t = (1,2,3,4,5)
# t[0] = 100  # 에러 (수정 X)
print(id(t))
